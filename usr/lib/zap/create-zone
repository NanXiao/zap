#!/bin/ksh
#
# Create a zone
#
# Usage:
#  -T template (implies sparse)
#  -t brand - sparse, whole, or alien [default sparse]
#  -z zone_name - zone name [required]
#  -i IPv4 address [can be multiple, for shared-ip]
#  -x IPv4 address [can be multiple, for exclusive-ip]
#  -I iso image for alien zone
#  -d directory to create [can be multiple]
#  -o overlay for partial root [can be multiple, passed to install]
#  -O add overlay [can be multiple, passed to install]
#  -U share user and their homedir with the zone
#  -B blank boot
#
# FIXMES:
# add IPv6
# add appstack overlays for sparse zones
# inherit dirs (like I do for sfw)
# dedicated stack and vnic creation
#

ZFSBASE="/export/zonedata"
ZROOTBASE="/export/zones"
ZSDIR="/var/zap/zones"
ZBRAND=TRIBsparse
ZNAME=""
ZIP4=""
XIP4=""
ZISOFILE=""
ZOVERLAY=""
ZADDOVERLAY=""
ZDIRS=""
ZUSERS=""
ZTEMPLATE=""
ZBLANK=""

usage() {
  echo "Usage: $0 -z zone_name [-t whole|sparse|alien]"
  echo "  [-T template] [-I iso_image] [-i ip_address] [-x ip_address]"
  echo "  [-B] [-d extra_dir] [-o overlay] [-O overlay] [-U user]"
  exit 1
}

while getopts "BT:t:z:i:x:I:o:O:d:U:" opt; do
case $opt in
B)
	ZBLANK="Y"
	;;
T)
	ZTEMPLATE="$OPTARG"
	;;
t)
	ZBRAND="$OPTARG"
	;;
z)
	ZNAME="$OPTARG"
	;;
i)
	ZIP4="${ZIP4} $OPTARG"
	;;
x)
	XIP4="${XIP4} $OPTARG"
	;;
I)
	ZISOFILE="$OPTARG"
	;;
o)
	ZOVERLAY="${ZOVERLAY} $OPTARG"
	;;
O)
	ZADDOVERLAY="${ZADDOVERLAY} $OPTARG"
	;;
d)
	ZDIRS="${ZDIRS} $OPTARG"
	;;
U)
	ZUSERS="${ZUSERS} $OPTARG"
	;;
esac
done

THISZONE=`/sbin/zonename`
if [ "X$THISZONE" != "Xglobal" ]; then
    echo "ERROR: zone management is only possible in the global zone"
    exit 1
fi

if [[ -z $ZNAME ]]; then
   echo "ERROR: zone name must be specified"
   usage
fi

#
# you can't create the global zone
#
if [ "X$ZNAME" = "Xglobal" ]; then
    echo "ERROR: the name global is reserved"
    exit 1
fi

#
# normalize the brand, reject unknown brands
#
case $ZBRAND in
sparse|TRIBsparse)
	ZBRAND="TRIBsparse"
	;;
whole|TRIBwhole)
	ZBRAND="TRIBwhole"
	;;
alien|TRIBalien)
	ZBRAND="TRIBalien"
	;;
*)
	echo "ERROR: unrecognized brand $ZBRAND"
	usage
	;;
esac

#
# verify arguments against brands
#
case $ZBRAND in
TRIBsparse)
	if [[ -n $ZOVERLAY || -n $ZADDOVERLAY ]]; then
	   echo "ERROR: cannot specify overlays for sparse-root zones"
	   usage
	fi
	if [[ -n $ZISOFILE ]]; then
	    echo "ERROR: cannot install a sparse-root zone from an iso image"
	    usage
	fi
	;;
TRIBwhole)
	if [[ -n $ZTEMPLATE ]]; then
	    echo "ERROR: templates must be sparse-root"
	    usage
	fi
	if [[ -n $ZISOFILE ]]; then
	    echo "ERROR: cannot install a whole-root zone from an iso image"
	    usage
	fi
	;;
TRIBalien)
	if [[ -n $ZTEMPLATE ]]; then
	    echo "ERROR: templates must be sparse-root"
	    usage
	fi
	if [[ -n $ZOVERLAY || -n $ZADDOVERLAY ]]; then
	   echo "ERROR: cannot specify overlays for alien zones"
	   usage
	fi
	if [[ -z $ZISOFILE ]]; then
	    echo "ERROR: an alien zone requires an iso image to be specified"
	    usage
	fi
	;;
esac

#
# ip-type cannot be both shared and exclusive
#
if [[ -n $XIP4 && -n $ZIP4 ]]; then
    echo "ERROR: cannot specify both -i and -x"
    usage
fi

#
# check if the zone already exists
#
/usr/sbin/zoneadm -z $ZNAME list > /dev/null 2>&1
ZEXISTS=$?
if [ $ZEXISTS -eq 0 ]; then
    echo "ERROR: zone $ZNAME already exists"
    exit 1
fi

#
# if given users to share, verify they and their home directory exist
# the assumption is that the user and their home directory
# are local, hence the explict check against /etc/passwd rather than
# getent which may select from a nameservice
#
if [[ -n $ZUSERS ]]; then
    for TUSER in $ZUSERS
    do
	chk=`/usr/bin/grep "^${TUSER}:" /etc/passwd`
	if [ -z "${chk}" ]; then
	    echo "ERROR: user $TUSER doesn't exist, cannot share"
	    exit 1
	fi
	DIR=`/usr/bin/grep "^${TUSER}:" /etc/passwd | /usr/bin/awk -F: '{print $6}'`
	if [ -z "${DIR}" ]; then
	    echo "ERROR: home for user $TUSER doesn't exist, cannot share"
	    exit 1
	fi
    done
fi

#
# check any overlays are valid
# -o - error if this overlay isn't installed
# -o/-O - error if this is not a valid overlay 
#
for OVL in $ZOVERLAY
do
	if [ ! -f /var/sadm/overlays/${OVL}.ovl ]; then
	    echo "ERROR: unrecognized overlay ${OVL}"
	    exit 1
	fi
	if [ ! -f /var/sadm/overlays/installed/${OVL} ]; then
	    echo "ERROR: overlay ${OVL} is not installed in the global zone"
	    exit 1
	fi
done
for OVL in $ZADDOVERLAY
do
	if [ ! -f /var/sadm/overlays/${OVL}.ovl ]; then
	    echo "ERROR: unrecognized overlay ${OVL}"
	    exit 1
	fi
done

#
# construct a zone configuration file
#

#
# we overload ZBRAND with the template; the actual brand is
# specified in the template, and note that create -t actually
# refers to a template. Verify that the template and the file
# systems it uses exist.
#
if [[ -n $ZTEMPLATE ]]; then
    ZBRAND=TRIBtemplate-${ZTEMPLATE}
    if [ ! -f /etc/zones/${ZBRAND}.xml ]; then
	echo "ERROR: no such template ${ZTEMPLATE}"
	exit 1
    fi
    UDIR=`/usr/bin/grep 'directory=\"/usr\"' /etc/zones/${ZBRAND}.xml | /usr/bin/awk '{print $2}' | /usr/bin/awk -F= '{print $2}' | /usr/bin/sed 's:"::g'`
    if [ ! -d ${UDIR} ]; then
	echo "ERROR: unable to find file systems for template ${ZTEMPLATE}"
	exit 1
    fi
fi

get_mask() {
CIDR=0
for octet in `echo $1 | /usr/bin/sed 's:\.: :g'`
do
case $octet in
255)
	CIDR=$(($CIDR+8)) ;;
254)
	CIDR=$(($CIDR+7)) ; break ;;
252)
	CIDR=$(($CIDR+6)) ; break ;;
248)
	CIDR=$(($CIDR+5)) ; break ;;
240)
	CIDR=$(($CIDR+4)) ; break ;;
224)
	CIDR=$(($CIDR+3)) ; break ;;
192)
	CIDR=$(($CIDR+2)) ; break ;;
128)
	CIDR=$(($CIDR+1)) ; break ;;
*)
	;;
esac
done
echo $CIDR
}

create_configuration() {
echo create -t $ZBRAND
echo set autoboot=true
echo set zonepath=${ZROOTBASE}/${ZNAME}
if [[ -n $XIP4 ]]; then
    echo set ip-type=exclusive
fi
#
# shared ip addresses
#
for IP in $ZIP4
do
	ZIFACE=`/usr/sbin/route -n get $IP | /usr/bin/grep interface: | /usr/bin/awk '{print $NF}'`
	ZMASK=`/usr/sbin/route -n get $IP | /usr/bin/grep mask: | /usr/bin/awk '{print $NF}'`
	ZCIDR=`get_mask $ZMASK`
	echo add net
	echo set physical=$ZIFACE
	echo set address=${IP}/${ZCIDR}
	echo end
done
#
# exclusive-ip addresses
# the address is used to construct the topology, it's up to the
# zone to manage it (if using dhcp, then any address on the correct
# subnet will do the right thing)
#
# we set up the vnic here, and save details so that we can remove it
# when the zone is destroyed
#
ZENUM=0
for IP in $XIP4
do
	ZIFACE=`/usr/sbin/route -n get $IP | /usr/bin/grep interface: | /usr/bin/awk '{print $NF}'`
	/usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	ZESTATUS=$?
	while [ $ZESTATUS -eq 0 ]
	do
	    ZENUM=$(($ZENUM+1))
	    /usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	    ZESTATUS=$?
	done
	/usr/sbin/dladm create-vnic -l $ZIFACE znic$ZENUM
	if [ ! -d $ZSDIR ]; then
	    /usr/bin/mkdir -p $ZSDIR
	fi
	if [ ! -f ${ZSDIR}/destroy.${ZNAME} ]; then
	    echo "#!/bin/sh" > ${ZSDIR}/destroy.${ZNAME}
	    /usr/bin/chmod a+x ${ZSDIR}/destroy.${ZNAME}
	fi
	echo "/usr/sbin/dladm delete-vnic znic$ZENUM" >> ${ZSDIR}/destroy.${ZNAME}
	echo add net
	echo set physical=znic$ZENUM
	echo end
done
for DIR in $ZDIRS
do
	/usr/bin/mkdir -p ${ZFSBASE}/${ZNAME}${DIR}
	echo add fs
	echo set dir=${DIR}
	echo set special=${ZFSBASE}/${ZNAME}${DIR}
	echo set type=lofs
	echo end
done
for TUSER in $ZUSERS
do
	echo add fs
	DIR=`/usr/bin/grep "^${TUSER}:" /etc/passwd | /usr/bin/awk -F: '{print $6}'`
	echo set dir=${DIR}
	echo set special=${DIR}
	echo set type=lofs
	echo end
	echo add admin
	echo set user=${TUSER}
	echo set auths=manage
	echo end
done
echo verify
echo commit
}

create_install_opts() {
for OVL in $ZOVERLAY
do
	printf " -o $OVL"
done
for OVL in $ZADDOVERLAY
do
	printf " -O $OVL"
done
if [[ -n $ZISOFILE ]]; then
    printf " -i $ZISOFILE"
fi
}

#
# create any missing zfs datasets
#
if [[ -n ${ZDIRS} ]]; then
   ZPARENT=`dirname ${ZFSBASE}`
   ZDPARENT=`/usr/sbin/zfs list -H ${ZPARENT} | /usr/bin/awk '{print $1}'`
   ZREALNAME=`echo $ZFSBASE | /usr/bin/sed s:${ZPARENT}:${ZDPARENT}:`
   if [[ ! -d ${ZFSBASE} ]]; then
      /usr/sbin/zfs create ${ZREALNAME}
   fi
   if [[ ! -d ${ZFSBASE}/${ZNAME} ]]; then
      /usr/sbin/zfs create ${ZREALNAME}/${ZNAME}
   fi
fi
if [[ ! -d ${ZROOTBASE} ]]; then
   ZPARENT=`dirname ${ZROOTBASE}`
   ZDPARENT=`/usr/sbin/zfs list -H ${ZPARENT} | /usr/bin/awk '{print $1}'`
   ZREALNAME=`echo $ZROOTBASE | /usr/bin/sed s:${ZPARENT}:${ZDPARENT}:`
   /usr/sbin/zfs create ${ZREALNAME}
fi

ZCFGFILE=/tmp/zap.zcfg.`date '+%F-%T'`.$$
create_configuration > ${ZCFGFILE}

/usr/sbin/zonecfg -z ${ZNAME} -f ${ZCFGFILE}

/usr/sbin/zoneadm -z ${ZNAME} install `create_install_opts`

#
# copy the shared user accounts specified into the zone
# and allow them the root role
#
for TUSER in $ZUSERS
do
    /usr/bin/grep "^${TUSER}:" /etc/passwd >> ${ZROOTBASE}/${ZNAME}/root/etc/passwd
    /usr/bin/grep "^${TUSER}:" /etc/shadow >> ${ZROOTBASE}/${ZNAME}/root/etc/shadow
    echo "${TUSER}::::roles=root" >> ${ZROOTBASE}/${ZNAME}/root/etc/user_attr
done

#
# blank the zone if requested; init requires the smf entry to be present in
# inittab but doesn't check what it actually runs
#
if [[ -n ${ZBLANK} ]]; then
    if [ -f ${ZROOTBASE}/${ZNAME}/root/etc/inittab ]; then
	/usr/bin/mv ${ZROOTBASE}/${ZNAME}/root/etc/inittab ${ZROOTBASE}/${ZNAME}/root/etc/inittab.full
	/usr/bin/cat ${ZROOTBASE}/${ZNAME}/root/etc/inittab.full | /usr/bin/sed 's:/lib/svc/bin/svc.startd:/usr/bin/sleep Inf:'  > ${ZROOTBASE}/${ZNAME}/root/etc/inittab
    fi
fi

#
# do some minimalist configuration of the zone
#
/usr/bin/cp /etc/resolv.conf ${ZROOTBASE}/${ZNAME}/root/etc
/usr/bin/cp /etc/default/init ${ZROOTBASE}/${ZNAME}/root/etc/default/init

/usr/sbin/zoneadm -z ${ZNAME} boot
/usr/bin/rm $ZCFGFILE
