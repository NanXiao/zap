#!/bin/ksh
#
# Create a zone
#
# Usage:
#  -T template (implies sparse)
#  -t brand - sparse, whole, or alien [default sparse]
#  -z zone_name - zone name [required]
#  -i IPv4 address [can be multiple, for shared-ip]
#  -x IPv4 address [can be multiple, for exclusive-ip]
#  -R Ipv4 network to proxy, in CIDR notation
#  -I iso image for alien zone
#  -d directory to create [can be multiple]
#  -o overlay for partial root [can be multiple, passed to install]
#  -O add overlay [can be multiple, passed to install]
#  -U share user and their homedir with the zone
#  -B blank boot
#  -K konfigurator arguments
#
# FIXMES:
# add IPv6
# add appstack overlays for sparse zones
# inherit dirs (like I do for sfw)
#

ZFSBASE="/export/zonedata"
ZROOTBASE="/export/zones"
ZSDIR="/var/zap/zones"
ZBRAND=TRIBsparse
ZNAME=""
ZIP4=""
XIP4=""
RIP4=""
NRIP4=""
ORIP4=""
ZISOFILE=""
ZOVERLAY=""
ZADDOVERLAY=""
ZDIRS=""
ZSHARED=""
ZUSERS=""
ZTEMPLATE=""
ZBLANK=""
KARGS=""

#
# these associative arrays track the interface to address mapping
#
typeset -A ifipmap
typeset -A xifipmap

usage() {
  echo "Usage: $0 -z zone_name [-t whole|sparse|alien]"
  echo "  [-T template] [-I iso_image]"
  echo "  [-i ip_address] [-x ip_address] [-R ip_network/prefix]"
  echo "  [-B] [-d extra_dir] [-o overlay] [-O overlay]"
  echo "  [-S shared_dir] [-U user]"
  echo "  [-K action=arg[=arg...]]"
  exit 1
}

while getopts "BT:t:z:i:x:R:I:o:O:d:S:U:K:" opt; do
case $opt in
B)
	ZBLANK="Y"
	;;
T)
	ZTEMPLATE="$OPTARG"
	;;
t)
	ZBRAND="$OPTARG"
	;;
z)
	ZNAME="$OPTARG"
	;;
i)
	ZIP4="${ZIP4} $OPTARG"
	;;
x)
	XIP4="${XIP4} $OPTARG"
	;;
R)
	RIP4="${RIP4} $OPTARG"
	;;
I)
	ZISOFILE="$OPTARG"
	;;
o)
	ZOVERLAY="${ZOVERLAY} $OPTARG"
	;;
O)
	ZADDOVERLAY="${ZADDOVERLAY} $OPTARG"
	;;
d)
	ZDIRS="${ZDIRS} $OPTARG"
	;;
S)
	ZSHARED="${ZSHARED} $OPTARG"
	;;
U)
	ZUSERS="${ZUSERS} $OPTARG"
	;;
K)
	KARGS="${KARGS} $OPTARG"
	;;
esac
done

THISZONE=`/sbin/zonename`
if [ "X$THISZONE" != "Xglobal" ]; then
    echo "ERROR: zone management is only possible in the global zone"
    exit 1
fi

if [[ -z $ZNAME ]]; then
   echo "ERROR: zone name must be specified"
   usage
fi

#
# you can't create the global zone
#
if [ "X$ZNAME" = "Xglobal" ]; then
    echo "ERROR: the name global is reserved"
    exit 1
fi

#
# normalize the brand, reject unknown brands
#
case $ZBRAND in
sparse|TRIBsparse)
	ZBRAND="TRIBsparse"
	;;
whole|TRIBwhole)
	ZBRAND="TRIBwhole"
	;;
alien|TRIBalien)
	ZBRAND="TRIBalien"
	;;
*)
	echo "ERROR: unrecognized brand $ZBRAND"
	usage
	;;
esac

#
# verify arguments against brands
#
case $ZBRAND in
TRIBsparse)
	if [[ -n $ZOVERLAY || -n $ZADDOVERLAY ]]; then
	   echo "ERROR: cannot specify overlays for sparse-root zones"
	   usage
	fi
	if [[ -n $ZISOFILE ]]; then
	    echo "ERROR: cannot install a sparse-root zone from an iso image"
	    usage
	fi
	if [ ! -d /zonelib/lib ]; then
	    /usr/bin/mkdir -p /zonelib/lib
	fi
	;;
TRIBwhole)
	if [[ -n $ZTEMPLATE ]]; then
	    echo "ERROR: templates must be sparse-root"
	    usage
	fi
	if [[ -n $ZISOFILE ]]; then
	    echo "ERROR: cannot install a whole-root zone from an iso image"
	    usage
	fi
	;;
TRIBalien)
	if [[ -n $ZTEMPLATE ]]; then
	    echo "ERROR: templates must be sparse-root"
	    usage
	fi
	if [[ -n $ZOVERLAY || -n $ZADDOVERLAY ]]; then
	   echo "ERROR: cannot specify overlays for alien zones"
	   usage
	fi
	if [[ -z $ZISOFILE ]]; then
	    echo "ERROR: an alien zone requires an iso image to be specified"
	    usage
	fi
	;;
esac

#
# ip-type cannot be both shared and exclusive
#
if [[ -n $XIP4 && -n $ZIP4 ]]; then
    echo "ERROR: cannot specify both -i and -x"
    usage
fi

#
# if the zone is a router/proxy (-R option) then the primary interface
# must be of type exclusive, not shared, a primary interface must be
# defined, and the zone type must not be alien
#
if [[ -n $RIP4 && -n $ZIP4 ]]; then
    echo "ERROR: proxy zones require -x, not -i"
    usage
fi
if [[ -n $RIP4 && -z $XIP4 ]]; then
    echo "ERROR: proxy zones require a primary interface be specified with -x"
    usage
fi
if [[ -n $RIP4 && $ZBRAND = TRIBalien ]]; then
    echo "ERROR: proxy zones must not be of type alien"
    usage
fi

#
# check if the zone already exists
#
/usr/sbin/zoneadm -z $ZNAME list > /dev/null 2>&1
ZEXISTS=$?
if [ $ZEXISTS -eq 0 ]; then
    echo "ERROR: zone $ZNAME already exists"
    exit 1
fi

#
# for any routing/proxy, verify we're being given sensible information
# It must look like a.b.c.d/n, and d must be zero
# rewrite addresses from the network address to the host address of .1
# check no other zone is routing this network
#
if [[ -n $RIP4 ]]; then
    for RIP in $RIP4
    do
	case $RIP in
	    *.*.*.*.*)
		echo "Invalid proxy network $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	    */*/*)
		echo "Invalid proxy network $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	    *.*.*.*/*)
		RPREFIX=${RIP##*/}
		RSUBNET=${RIP%/*}
		echo $RSUBNET | tr '.' ' '|read OCT1 OCT2 OCT3 OCT4
		if [ $OCT1 -lt 1 -o $OCT1 -gt 223 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  first octet $OCT1 out of range"
		    exit 2
		fi
		if [ $OCT2 -lt 0 -o $OCT2 -gt 255 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  second octet $OCT2 out of range"
		    exit 2
		fi
		if [ $OCT3 -lt 0 -o $OCT3 -gt 255 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  third octet $OCT3 out of range"
		    exit 2
		fi
		if [ $OCT4 -ne 0 ]; then
		    echo "Invalid proxy network $RIP"
		    echo "  fourth octet $OCT4 out of range, must be 0"
		    exit 2
		fi
		case $RPREFIX in
		    8)
			if [ $OCT2 -ne 0 ]; then
			    echo "Invalid proxy network $RIP"
			    echo "  second octet $OCT2 out of range, must be zero for /8"
			    exit 2
			fi
			if [ $OCT3 -ne 0 ]; then
			    echo "Invalid proxy address $RIP"
			    echo "  third octet $OCT3 out of range, must be zero for /8"
			    exit 2
			fi
			if [ -f ${ZSDIR}/rconfig.${OCT1} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    16)
			if [ $OCT3 -ne 0 ]; then
			    echo "Invalid proxy address $RIP"
			    echo "  third octet $OCT3 out of range, must be zero for /16"
			    exit 2
			fi
			if [ -f ${ZSDIR}/rconfig.${OCT1} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: parent network ${OCT1}.0.0.0/8 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f ${ZSDIR}/rconfig.${OCT1}.${OCT2} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1}.${OCT2} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    24)
			if [ -f ${ZSDIR}/rconfig.${OCT1} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: parent network ${OCT1}.0.0.0/8 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f ${ZSDIR}/rconfig.${OCT1}.${OCT2} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1}.${OCT2} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: parent network ${OCT1}.${OCT2}.0.0/16 for $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			if [ -f ${ZSDIR}/rconfig.${OCT1}.${OCT2}.${OCT3} ]; then
			    ZOWNER=`/usr/bin/grep zone: ${ZSDIR}/rconfig.${OCT1}.${OCT2}.${OCT3} | /usr/bin/awk '{print $NF}'`
			    echo "ERROR: network $RIP is already in use by zone $ZOWNER"
			    exit 2
			fi
			NRIP4="$NRIP4 ${OCT1}.${OCT2}.${OCT3}.1/${RPREFIX}"
			;;
		    *)
			echo "Invalid proxy prefix /$RPREFIX"
			echo "  Supported values: /8 /16 /24"
			exit 2
			;;
		esac
		;;
	    *)
		echo "Invalid proxy address $RIP"
		echo "  Expected a.b.c.d/prefix"
		exit 2
		;;
	esac
    done
    ORIP4=$RIP4
    RIP4=$NRIP4
fi

#
# if given any directories to share, verify they exist
#
if [[ -n $ZSHARED ]]; then
    for DIR in $ZSHARED
    do
	if [ ! -d "${DIR}" ]; then
	    echo "ERROR: shared directory $DIR not found"
	    exit 1
	fi
    done
fi

#
# if given users to share, verify they and their home directory exist
# the assumption is that the user and their home directory
# are local, hence the explict check against /etc/passwd rather than
# getent which may select from a nameservice
#
if [[ -n $ZUSERS ]]; then
    for TUSER in $ZUSERS
    do
	chk=`/usr/bin/grep "^${TUSER}:" /etc/passwd`
	if [ -z "${chk}" ]; then
	    echo "ERROR: user $TUSER doesn't exist, cannot share"
	    exit 1
	fi
	DIR=`/usr/bin/grep "^${TUSER}:" /etc/passwd | /usr/bin/awk -F: '{print $6}'`
	if [ -z "${DIR}" ]; then
	    echo "ERROR: home for user $TUSER doesn't exist, cannot share"
	    exit 1
	fi
	if [ ! -d "${DIR}" ]; then
	    echo "ERROR: shared home directory $DIR not found"
	    exit 1
	fi
    done
fi

#
# check any overlays are valid
# -o - error if this overlay isn't installed
# -o/-O - error if this is not a valid overlay 
#
for OVL in $ZOVERLAY
do
	if [ ! -f /var/sadm/overlays/${OVL}.ovl ]; then
	    echo "ERROR: unrecognized overlay ${OVL}"
	    exit 1
	fi
	if [ ! -f /var/sadm/overlays/installed/${OVL} ]; then
	    echo "ERROR: overlay ${OVL} is not installed in the global zone"
	    exit 1
	fi
done
for OVL in $ZADDOVERLAY
do
	if [ ! -f /var/sadm/overlays/${OVL}.ovl ]; then
	    echo "ERROR: unrecognized overlay ${OVL}"
	    exit 1
	fi
done

#
# construct a zone configuration file
#

#
# we overload ZBRAND with the template; the actual brand is
# specified in the template, and note that create -t actually
# refers to a template. Verify that the template and the file
# systems it uses exist.
#
if [[ -n $ZTEMPLATE ]]; then
    ZBRAND=TRIBtemplate-${ZTEMPLATE}
    if [ ! -f /etc/zones/${ZBRAND}.xml ]; then
	echo "ERROR: no such template ${ZTEMPLATE}"
	exit 1
    fi
    UDIR=`/usr/bin/grep 'directory=\"/usr\"' /etc/zones/${ZBRAND}.xml | /usr/bin/awk '{print $2}' | /usr/bin/awk -F= '{print $2}' | /usr/bin/sed 's:"::g'`
    if [ ! -d ${UDIR} ]; then
	echo "ERROR: unable to find file systems for template ${ZTEMPLATE}"
	exit 1
    fi
fi

get_mask() {
CIDR=0
for octet in `echo $1 | /usr/bin/sed 's:\.: :g'`
do
case $octet in
255)
	CIDR=$(($CIDR+8)) ;;
254)
	CIDR=$(($CIDR+7)) ; break ;;
252)
	CIDR=$(($CIDR+6)) ; break ;;
248)
	CIDR=$(($CIDR+5)) ; break ;;
240)
	CIDR=$(($CIDR+4)) ; break ;;
224)
	CIDR=$(($CIDR+3)) ; break ;;
192)
	CIDR=$(($CIDR+2)) ; break ;;
128)
	CIDR=$(($CIDR+1)) ; break ;;
*)
	;;
esac
done
echo $CIDR
}

#
# return interface and cidr prefix for the given address
#
get_net_details() {
    IIP=$1
    NIP=`get_short_net ${IIP}/24`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	IFACE=`/usr/bin/grep interface: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'`
	ICIDR=24
	echo "$IFACE $ICIDR"
	return
    fi
    NIP=`get_short_net ${IIP}/16`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	IFACE=`/usr/bin/grep interface: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'`
	ICIDR=16
	echo "$IFACE $ICIDR"
	return
    fi
    NIP=`get_short_net ${IIP}/8`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	IFACE=`/usr/bin/grep interface: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'`
	ICIDR=8
	echo "$IFACE $ICIDR"
	return
    fi
    IFACE=`/usr/sbin/route -n get $IIP | /usr/bin/grep interface: | /usr/bin/awk '{print $NF}'`
    IMASK=`/usr/sbin/route -n get $IIP | /usr/bin/grep mask: | /usr/bin/awk '{print $NF}'`
    ICIDR=`get_mask $IMASK`
    echo "$IFACE $ICIDR"
}

#
# return the parent zone if routed
#
get_parent_zone() {
    IIP=$1
    NIP=`get_short_net ${IIP}/24`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	/usr/bin/grep zone: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
    NIP=`get_short_net ${IIP}/16`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	/usr/bin/grep zone: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
    NIP=`get_short_net ${IIP}/8`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
        /usr/bin/grep zone: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
}

#
# return the default gateway for the given address
#
get_gateway() {
    IIP=$1
    NIP=`get_short_net ${IIP}/24`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	/usr/bin/grep gateway: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
    NIP=`get_short_net ${IIP}/16`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
	/usr/bin/grep gateway: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
    NIP=`get_short_net ${IIP}/8`
    if [ -f ${ZSDIR}/rconfig.${NIP} ] ; then
        /usr/bin/grep gateway: ${ZSDIR}/rconfig.${NIP} | /usr/bin/awk '{print $NF}'
	return
    fi
    /usr/sbin/route -n get default | /usr/bin/grep gateway: | /usr/bin/awk '{print $NF}'
}

#
# return the short form of the network address - just the significant octets
# we only support /8 /16 /24 for router/proxy zones so no need to check
#
get_short_net() {
    IIP=$1
    SRPREFIX=${IIP##*/}
    SRSUBNET=${IIP%/*}
    echo $SRSUBNET | tr '.' ' '|read OCT1 OCT2 OCT3 OCT4
    case $SRPREFIX in
	8)
	    echo "${OCT1}"
	    ;;
	16)
	    echo "${OCT1}.${OCT2}"
	    ;;
	24)
	    echo "${OCT1}.${OCT2}.${OCT3}"
	    ;;
    esac
}

create_configuration() {
if [ ! -d $ZSDIR ]; then
    /usr/bin/mkdir -p $ZSDIR
fi
touch ${ZSDIR}/zconfig.${ZNAME}
if [ ! -f ${ZSDIR}/destroy.${ZNAME} ]; then
    echo "#!/bin/sh" > ${ZSDIR}/destroy.${ZNAME}
    /usr/bin/chmod a+x ${ZSDIR}/destroy.${ZNAME}
fi
echo "/bin/rm -f ${ZSDIR}/zconfig.${ZNAME}" >> ${ZSDIR}/destroy.${ZNAME}
echo "brand: $ZBRAND" >> ${ZSDIR}/zconfig.${ZNAME}
echo "zone: $ZNAME" >> ${ZSDIR}/zconfig.${ZNAME}
echo create -t $ZBRAND
echo set autoboot=true
echo set zonepath=${ZROOTBASE}/${ZNAME}
if [[ -n $XIP4 ]]; then
    echo set ip-type=exclusive
fi
#
# shared ip addresses
#
for IP in $ZIP4
do
	get_net_details $IP | read ZIFACE ZCIDR
	echo add net
	echo set physical=$ZIFACE
	echo set address=${IP}/${ZCIDR}
	echo end
done
#
# exclusive-ip addresses
# the address is used to construct the topology, it's up to the
# zone to manage it, but we set up a valid hostname file
#
# we set up the vnic here, and save details so that we can remove it
# when the zone is destroyed
#
ZENUM=0
for IP in $XIP4
do
	get_net_details $IP | read ZIFACE ZCIDR
	/usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	ZESTATUS=$?
	while [ $ZESTATUS -eq 0 ]
	do
	    ZENUM=$(($ZENUM+1))
	    /usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	    ZESTATUS=$?
	done
	/usr/sbin/dladm create-vnic -l $ZIFACE znic$ZENUM
	echo "/usr/sbin/dladm delete-vnic znic$ZENUM" >> ${ZSDIR}/destroy.${ZNAME}
	ifipmap[znic$ZENUM]=$IP/$ZCIDR
	xifipmap[znic$ZENUM]=$IP/$ZCIDR
	echo add net
	echo set physical=znic$ZENUM
	echo end
	ZROUTER=`get_parent_zone $IP`
	if [[ -n $ZROUTER ]]; then
	    echo "parent_zone: $ZROUTER" >> ${ZSDIR}/zconfig.${ZNAME}
	fi
done
#
# For router/proxy zones we create an etherstub for the internal virtual
# network, and create a vnic over that etherstub. The router/proxy zone
# will have the matching .1 address on that network.
#
# Note that the destroy script must have been initialized above as we
# require a router/proxy zone to have an exclusive-ip address, and we
# carry on enumerating ZENUM where we left off
#
ZRNUM=0
ZENUM=$(($ZENUM+1))
for IP in $RIP4
do
	/usr/sbin/dladm show-etherstub zrstub$ZRNUM > /dev/null 2>&1
	ZRSTATUS=$?
	while [ $ZRSTATUS -eq 0 ]
	do
	    ZRNUM=$(($ZRNUM+1))
	    /usr/sbin/dladm show-etherstub zrstub$ZRNUM > /dev/null 2>&1
	    ZRSTATUS=$?
	done
	ZIFACE=zrstub$ZRNUM
	/usr/sbin/dladm create-etherstub $ZIFACE
	/usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	ZESTATUS=$?
	while [ $ZESTATUS -eq 0 ]
	do
	    ZENUM=$(($ZENUM+1))
	    /usr/sbin/dladm show-vnic znic$ZENUM > /dev/null 2>&1
	    ZESTATUS=$?
	done
	/usr/sbin/dladm create-vnic -l $ZIFACE znic$ZENUM
	echo "/usr/sbin/dladm delete-vnic znic$ZENUM" >> ${ZSDIR}/destroy.${ZNAME}
	# delete the etherstub after the vnic configured on it
	echo "/usr/sbin/dladm delete-etherstub $ZIFACE" >> ${ZSDIR}/destroy.${ZNAME}
	ifipmap[znic$ZENUM]=$IP
	echo add net
	echo set physical=znic$ZENUM
	echo end
	# save the configuration here
	ZNETNAME=`get_short_net $IP`
	touch ${ZSDIR}/rconfig.${ZNETNAME}
	echo "interface: $ZIFACE" >> ${ZSDIR}/rconfig.${ZNETNAME}
	echo "gateway: ${IP%/*}" >> ${ZSDIR}/rconfig.${ZNETNAME}
	echo "zone: ${ZNAME}" >> ${ZSDIR}/rconfig.${ZNETNAME}
	echo "rm ${ZSDIR}/rconfig.${ZNETNAME}" >> ${ZSDIR}/destroy.${ZNAME}
done
for DIR in $ZDIRS
do
	/usr/bin/mkdir -p ${ZFSBASE}/${ZNAME}${DIR}
	echo add fs
	echo set dir=${DIR}
	echo set special=${ZFSBASE}/${ZNAME}${DIR}
	echo set type=lofs
	echo end
done
for DIR in $ZSHARED
do
	echo add fs
	echo set dir=${DIR}
	echo set special=${DIR}
	echo set type=lofs
	echo end
done
for TUSER in $ZUSERS
do
	echo add fs
	DIR=`/usr/bin/grep "^${TUSER}:" /etc/passwd | /usr/bin/awk -F: '{print $6}'`
	echo set dir=${DIR}
	echo set special=${DIR}
	echo set type=lofs
	echo end
	echo add admin
	echo set user=${TUSER}
	echo set auths=manage
	echo end
done
echo verify
echo commit
}

create_install_opts() {
for OVL in $ZOVERLAY
do
	printf " -o $OVL"
done
for OVL in $ZADDOVERLAY
do
	printf " -O $OVL"
done
if [[ -n $ZISOFILE ]]; then
    printf " -i $ZISOFILE"
fi
}

#
# create any missing zfs datasets
#
if [[ -n ${ZDIRS} ]]; then
   ZPARENT=${ZFSBASE%/*}
   ZDPARENT=`/usr/sbin/zfs list -H ${ZPARENT} | /usr/bin/awk '{print $1}'`
   ZREALNAME=`echo $ZFSBASE | /usr/bin/sed s:${ZPARENT}:${ZDPARENT}:`
   if [[ ! -d ${ZFSBASE} ]]; then
      /usr/sbin/zfs create ${ZREALNAME}
   fi
   if [[ ! -d ${ZFSBASE}/${ZNAME} ]]; then
      /usr/sbin/zfs create ${ZREALNAME}/${ZNAME}
   fi
fi
if [[ ! -d ${ZROOTBASE} ]]; then
   ZPARENT=${ZROOTBASE%/*}
   ZDPARENT=`/usr/sbin/zfs list -H ${ZPARENT} | /usr/bin/awk '{print $1}'`
   ZREALNAME=`echo $ZROOTBASE | /usr/bin/sed s:${ZPARENT}:${ZDPARENT}:`
   /usr/sbin/zfs create ${ZREALNAME}
fi

ZCFGFILE=/tmp/zap.zcfg.`date '+%F-%T'`.$$
create_configuration > ${ZCFGFILE}

/usr/sbin/zonecfg -z ${ZNAME} -f ${ZCFGFILE}

/usr/sbin/zoneadm -z ${ZNAME} install `create_install_opts`

#
# copy the shared user accounts specified into the zone
# and allow them the root role
#
for TUSER in $ZUSERS
do
    /usr/bin/grep "^${TUSER}:" /etc/passwd >> ${ZROOTBASE}/${ZNAME}/root/etc/passwd
    /usr/bin/grep "^${TUSER}:" /etc/shadow >> ${ZROOTBASE}/${ZNAME}/root/etc/shadow
    echo "${TUSER}::::roles=root" >> ${ZROOTBASE}/${ZNAME}/root/etc/user_attr
done

#
# for exclusive-ip stacks:
#  create /etc/hostname.* files for each vnic we created
#  set the default route
#
for index in "${!ifipmap[@]}"
do
    echo "${ifipmap[$index]}" > ${ZROOTBASE}/${ZNAME}/root/etc/hostname.$index
done
if [[ -n $XIP4 ]]; then
    ZGW=`get_gateway $XIP4`
    echo $ZGW > ${ZROOTBASE}/${ZNAME}/root/etc/defaultrouter
fi

#
# for router/proxy zones:
#  configure nat for all subnets
#  enable ip forwarding on all interfaces
#
if [[ -n $RIP4 ]]; then
    touch ${ZROOTBASE}/${ZNAME}/root/etc/rc2.d/S83router
    echo "#!/bin/sh" > ${ZROOTBASE}/${ZNAME}/root/etc/rc2.d/S83router
    for index in "${!ifipmap[@]}"
    do
	echo "/usr/sbin/ipadm set-ifprop -t -p forwarding=on -m ipv4 $index" >> ${ZROOTBASE}/${ZNAME}/root/etc/rc2.d/S83router
    done
    echo /usr/sbin/svcadm enable network/ipfilter >> ${ZROOTBASE}/${ZNAME}/root/etc/rc2.d/S83router
    chmod a+x ${ZROOTBASE}/${ZNAME}/root/etc/rc2.d/S83router
    IFACE=`echo "${!xifipmap[@]}"|awk '{print $1}'`
    touch ${ZROOTBASE}/${ZNAME}/root/etc/ipf/ipnat.conf
    for subnet in $ORIP4
    do
	echo "map $IFACE $subnet -> 0/32 portmap tcp/udp auto" >> ${ZROOTBASE}/${ZNAME}/root/etc/ipf/ipnat.conf
	echo "map $IFACE $subnet -> 0/32" >> ${ZROOTBASE}/${ZNAME}/root/etc/ipf/ipnat.conf
    done
fi

#
# blank the zone if requested; init requires the smf entry to be present in
# inittab but doesn't check what it actually runs
#
if [[ -n ${ZBLANK} ]]; then
    if [ -f ${ZROOTBASE}/${ZNAME}/root/etc/inittab ]; then
	/usr/bin/mv ${ZROOTBASE}/${ZNAME}/root/etc/inittab ${ZROOTBASE}/${ZNAME}/root/etc/inittab.full
	/usr/bin/cat ${ZROOTBASE}/${ZNAME}/root/etc/inittab.full | /usr/bin/sed 's:/lib/svc/bin/svc.startd:/usr/bin/sleep Inf:'  > ${ZROOTBASE}/${ZNAME}/root/etc/inittab
    fi
fi

#
# do some minimalist configuration of the zone
#
/usr/bin/cp /etc/resolv.conf ${ZROOTBASE}/${ZNAME}/root/etc
/usr/bin/cp /etc/default/init ${ZROOTBASE}/${ZNAME}/root/etc/default/init

#
# apply any konfiguration requests
#
for KARG in $KARGS
do
    /usr/lib/zap/zone-konfigurator -z ${ZNAME} $KARG
done

/usr/sbin/zoneadm -z ${ZNAME} boot
/usr/bin/rm $ZCFGFILE
